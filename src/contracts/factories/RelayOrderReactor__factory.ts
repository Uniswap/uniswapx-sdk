/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  RelayOrderReactor,
  RelayOrderReactorInterface,
} from "../RelayOrderReactor";

const _abi = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_permit2",
        type: "address",
        internalType: "contract IPermit2",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "receive",
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "execute",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct SignedOrder",
        components: [
          {
            name: "order",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "sig",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeBatch",
    inputs: [
      {
        name: "orders",
        type: "tuple[]",
        internalType: "struct SignedOrder[]",
        components: [
          {
            name: "order",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "sig",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeBatchWithCallback",
    inputs: [
      {
        name: "orders",
        type: "tuple[]",
        internalType: "struct SignedOrder[]",
        components: [
          {
            name: "order",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "sig",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "callbackData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "executeWithCallback",
    inputs: [
      {
        name: "order",
        type: "tuple",
        internalType: "struct SignedOrder",
        components: [
          {
            name: "order",
            type: "bytes",
            internalType: "bytes",
          },
          {
            name: "sig",
            type: "bytes",
            internalType: "bytes",
          },
        ],
      },
      {
        name: "callbackData",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "permit2",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "contract IPermit2",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "event",
    name: "Fill",
    inputs: [
      {
        name: "orderHash",
        type: "bytes32",
        indexed: true,
        internalType: "bytes32",
      },
      {
        name: "filler",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "swapper",
        type: "address",
        indexed: true,
        internalType: "address",
      },
      {
        name: "nonce",
        type: "uint256",
        indexed: false,
        internalType: "uint256",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "CallFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "DeadlineBeforeEndTime",
    inputs: [],
  },
  {
    type: "error",
    name: "DeadlinePassed",
    inputs: [],
  },
  {
    type: "error",
    name: "EndTimeBeforeStartTime",
    inputs: [],
  },
  {
    type: "error",
    name: "IncorrectAmounts",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientBalance",
    inputs: [],
  },
  {
    type: "error",
    name: "InsufficientEth",
    inputs: [],
  },
  {
    type: "error",
    name: "InvalidReactor",
    inputs: [],
  },
  {
    type: "error",
    name: "NativeTransferFailed",
    inputs: [],
  },
  {
    type: "error",
    name: "OrderEndTimeBeforeStartTime",
    inputs: [],
  },
];

export class RelayOrderReactor__factory {
  static readonly abi = _abi;
  static createInterface(): RelayOrderReactorInterface {
    return new utils.Interface(_abi) as RelayOrderReactorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayOrderReactor {
    return new Contract(address, _abi, signerOrProvider) as RelayOrderReactor;
  }
}
