/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  RelayOrderReactor,
  RelayOrderReactorInterface,
} from "../RelayOrderReactor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPermit2",
        name: "_permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DeadlineBeforeEndTime",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "EndTimeBeforeStartTime",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsafeCast",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "swapper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "Fill",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
        ],
        internalType: "struct SignedOrder",
        name: "signedOrder",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
    ],
    name: "execute",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        name: "transferDetails",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract IPermit2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "universalRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c03461009257601f611d1838819003918201601f19168301916001600160401b038311848410176100975780849260409485528339810103126100925780516001600160a01b03918282168203610092576020015191821682036100925760805260a052604051611c6a90816100ae823960805181818161011b01526107fd015260a05181818160af01526108270152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c90816312261ee7146100d657816335a9e4df14610065575080638229e25f14610060578063ac9650d81461005b5763e956bbdf1461005657600080fd5b6106dc565b6105df565b610172565b346100d357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b346100d357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d35773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b600091031261014f57565b600080fd5b73ffffffffffffffffffffffffffffffffffffffff81160361014f57565b3461014f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f576004356101ad81610154565b60243567ffffffffffffffff80821161014f573660238301121561014f57816004013590811161014f57810136602482011161014f578160e091031261014f576024810135906101fc82610154565b60448101359161020b83610154565b606482013560848301359060a48401359260ff8416840361014f5760e460c4860135950135958773ffffffffffffffffffffffffffffffffffffffff808094169216926040516020918282017f3644e515000000000000000000000000000000000000000000000000000000008152600483526102878361094d565b836000958692839482169573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc287036104d9575b505050506102cc575b505050156102c157005b6102ca97611a51565b005b919250907fdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f70361044e576040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152908290829060249082905afa918215610449578661040a6000948594859161041c575b506040517f8fcbaf0c000000000000000000000000000000000000000000000000000000008582015273ffffffffffffffffffffffffffffffffffffffff80891660248301528916604482015260648101919091526084810192909252600160a483015260ff8a1660c483015260e482018b905261010482018c90528161012481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610985565b905b81519101828c5af13880806102b7565b61043c9150843d8611610442575b6104348183610985565b810190611943565b3861035b565b503d61042a565b6112c2565b506040517fd505accf000000000000000000000000000000000000000000000000000000008183015273ffffffffffffffffffffffffffffffffffffffff808416602483015284166044820152606481018590526084810186905260ff871660a482015260c4810188905260e4810189905260009182916104d38161010481016103de565b9061040c565b5192945090611388fa823d149351938415151616809390838d38806102ae565b60005b83811061050c5750506000910152565b81810151838201526020016104fc565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602093610558815180928187528780880191016104f9565b0116010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106105935750505050505090565b90919293949584806105cf837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a5161051c565b9801930193019194939290610583565b3461014f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f5767ffffffffffffffff60043581811161014f573660238201121561014f57806004013591821161014f573660248360051b8301011161014f576106639160246106579201610b33565b6040519182918261055f565b0390f35b90815180825260208080930193019160005b828110610687575050505090565b90919293826040826106bc60019489516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b01950193929101610679565b9060206106d9928181520190610667565b90565b3461014f5760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc818136011261014f5767ffffffffffffffff9160043583811161014f57818160040193823603011261014f5760243561073c81610154565b6107468480610a36565b81019060208183031261014f5780359087821161014f5701906101008282031261014f57845192610776846108fc565b6107808284610c04565b8452608083013588811161014f578261079a918501610c52565b602085015260a08301358685015260c0830135606085015260e083013597881161014f576107fa6107d6610823936106639a61084c9601610cfa565b97608086019889526107e786610e63565b60246107f287611702565b970190610a36565b917f000000000000000000000000000000000000000000000000000000000000000087876112ce565b94517f000000000000000000000000000000000000000000000000000000000000000090610e10565b519082610870602084015173ffffffffffffffffffffffffffffffffffffffff1690565b920151907f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd6673ffffffffffffffffffffffffffffffffffffffff8551941693806108c03395829190602083019252565b0390a451918291826106c8565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761091857604052565b6108cd565b6080810190811067ffffffffffffffff82111761091857604052565b67ffffffffffffffff811161091857604052565b6040810190811067ffffffffffffffff82111761091857604052565b6060810190811067ffffffffffffffff82111761091857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761091857604052565b604051906109d382610969565b565b604051906109d38261094d565b604051906109d38261091d565b67ffffffffffffffff81116109185760051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561014f570180359067ffffffffffffffff821161014f5760200191813603831361014f57565b90821015610aa257610a9e9160051b810190610a36565b9091565b610a07565b908092918237016000815290565b67ffffffffffffffff811161091857601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d15610b1a573d90610b0082610ab5565b91610b0e6040519384610985565b82523d6000602084013e565b606090565b8051821015610aa25760209160051b010190565b919091610b3f836109ef565b906040610b4e81519384610985565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610b7b866109ef565b0160005b818110610bf3575050829460005b818110610b9b575050505050565b600080610ba9838588610a87565b90610bb8875180938193610aa7565b0390305af4610bc5610aef565b9015610beb5790600191610bd98288610b1f565b52610be48187610b1f565b5001610b8d565b602081519101fd5b806060602080938801015201610b7f565b919082608091031261014f57604051610c1c8161091d565b60608082948035610c2c81610154565b84526020810135610c3c81610154565b6020850152604081013560408501520135910152565b81601f8201121561014f57803590610c69826109ef565b92604092610c7984519586610985565b808552602091828087019260071b8501019381851161014f578301915b848310610ca65750505050505090565b60808383031261014f57836080918751610cbf8161091d565b8535610cca81610154565b815282860135610cd981610154565b83820152888601358982015260608087013590820152815201920191610c96565b9080601f8301121561014f57813591610d12836109ef565b92604090610d2282519586610985565b808552602093848087019260051b8501019381851161014f57858101925b858410610d51575050505050505090565b833567ffffffffffffffff811161014f57820183603f8201121561014f578781013591610d7d83610ab5565b610d8988519182610985565b8381528588858501011161014f5760008a8581968b8397018386013783010152815201930192610d40565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610de15760010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b805190600090815b838110610e26575050505050565b610e308183610b1f565b51838082516020809401828a5af190610e47610aef565b9115610e5d575050610e5890610db4565b610e18565b81519101fd5b6060815101516060820190815111610f4e576060825101514211610f245751604082015111610efa575151610ec890610eaf9073ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff1690565b3003610ed057565b60046040517f4ddf4a64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f43133453000000000000000000000000000000000000000000000000000000008152fd5b60046040517f70f65caa000000000000000000000000000000000000000000000000000000008152fd5b60046040517f773a6187000000000000000000000000000000000000000000000000000000008152fd5b6040517f52656c61794f726465722800000000000000000000000000000000000000000060208201527f616464726573732072656163746f722c00000000000000000000000000000000602b8201527f6164647265737320737761707065722c00000000000000000000000000000000603b8201527f75696e743235365b5d207374617274416d6f756e74732c000000000000000000604b8201527f616464726573735b5d20726563697069656e74732c000000000000000000000060628201527f75696e74323536206465636179537461727454696d652c00000000000000000060778201527f75696e74323536206465636179456e6454696d652c0000000000000000000000608e8201527f62797465735b5d20616374696f6e73290000000000000000000000000000000060a38201526093815260c0810181811067ffffffffffffffff8211176109185760405290565b6111886106d960336110dc610f78565b6040516110e881610969565b602e815260208101907f546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c7582527f696e7432353620616d6f756e742900000000000000000000000000000000000060408201526040519586937f52656c61794f72646572207769746e6573732900000000000000000000000000602086015261117981518092602089890191016104f9565b840191518093868401906104f9565b01036013810184520182610985565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b9593909796949160c08752610120870198805190606060c08a01528151809b5261014089019a60208093019060005b818110611282575050506106d9999a61127496959493836040848d60e06112629861124398015191015201516101008d01528b8303908c0152610667565b73ffffffffffffffffffffffffffffffffffffffff9094166040890152565b6060870152858203608087015261051c565b9260a0818503910152611197565b90919c8460408f926112b781600195516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b019e01929101611205565b6040513d6000823e3d90fd5b9093919594926112ed906020830151604084015160608501519161144a565b909261134a602073ffffffffffffffffffffffffffffffffffffffff849a1694805160606040820151910151906113226109c6565b98895283890152604088015251015173ffffffffffffffffffffffffffffffffffffffff1690565b936113536110cc565b843b1561014f576000968793611399926040519a8b998a9889977ffe8ec1a7000000000000000000000000000000000000000000000000000000008952600489016111d6565b03925af18015610449576113aa5750565b806113b76109d392610939565b80610144565b906113c7826109ef565b60406113d581519283610985565b8382527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061140383956109ef565b01906000805b838110611417575050505050565b8251908382019180831067ffffffffffffffff841117610918576020928552838152828481830152828801015201611409565b939290919361145981516113bd565b9461146482516113bd565b93600092835b815181101561157557806114816115679284610b1f565b518a61152187876114a6855173ffffffffffffffffffffffffffffffffffffffff1690565b936114f18760608801928351976114da6114be6109d5565b73ffffffffffffffffffffffffffffffffffffffff9092168252565b602098898201526114eb8383610b1f565b52610b1f565b508486015173ffffffffffffffffffffffffffffffffffffffff168061156c575060408d965b015190519061157e565b9061154961152d6109d5565b73ffffffffffffffffffffffffffffffffffffffff9094168452565b820152611556828a610b1f565b526115618189610b1f565b50610db4565b61146a565b60409096611517565b50505050505090565b929091828411156115b35760046040517fd856fc5a000000000000000000000000000000000000000000000000000000008152fd5b4282116115c1575050905090565b4281106115ce5750505090565b804203910390838084106000146115ef57926115ea93036115fd565b900390565b6115f993036115fd565b0190565b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04811182021583021561014f57020490565b9061163b826109ef565b6116486040519182610985565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061167682946109ef565b0190602036910137565b611688610f78565b6020815191012090565b805160208092019160005b8281106116ab575050505090565b83518552938101939281019260010161169d565b805160208092019160005b8281106116d8575050505090565b835173ffffffffffffffffffffffffffffffffffffffff16855293810193928101926001016116ca565b9060208083019283515161171581611631565b9061171f81611631565b9560005b8281106118d257505050608082019283515161173e81611631565b9460005b8281106118a7575050506118956118a19394959661175e611680565b968651966117a0856117848a5173ffffffffffffffffffffffffffffffffffffffff1690565b99015173ffffffffffffffffffffffffffffffffffffffff1690565b9260405196876117b38882018093611692565b03976117e57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0998a8101835282610985565b51902090604051611809816117fd8a820180956116bf565b038a8101835282610985565b5190209060606040840151930151936040516118388161182c8b82018095611692565b038b8101835282610985565b519020946040519a8b9889019c8d949160e0969399989794919961010087019a875273ffffffffffffffffffffffffffffffffffffffff80921660208801521660408601526060850152608084015260a083015260c08201520152565b03908101835282610985565b51902090565b806118b66118cd928451610b1f565b518581519101206118c7828a610b1f565b52610db4565b611742565b80611939611914886118e861193e958751610b1f565b5160408101516118f8868b610b1f565b52015173ffffffffffffffffffffffffffffffffffffffff1690565b61191e838c610b1f565b9073ffffffffffffffffffffffffffffffffffffffff169052565b610db4565b611723565b9081602091031261014f575190565b519065ffffffffffff8216820361014f57565b9081606091031261014f57805161197b81610154565b916106d9604061198d60208501611952565b9301611952565b92917fff00000000000000000000000000000000000000000000000000000000000000916040519460208601526040850152166060830152604182526109d38261091d565b906106d9939260409173ffffffffffffffffffffffffffffffffffffffff809116845281518181511660208601528160208201511684860152606065ffffffffffff9182868201511682880152015116608085015260208201511660a0840152015160c0820152610100908160e0820152019061051c565b6040517f927da10500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152918216602482018190529184166044820152909791966e22d473030f116ddee9f6b43ac78ba39690959294909391906060826064818b5afa91821561044957600092611bdb575b50611ae590611c12565b611aed6109e2565b73ffffffffffffffffffffffffffffffffffffffff909a168a5273ffffffffffffffffffffffffffffffffffffffff1660208a015265ffffffffffff60408a015265ffffffffffff166060890152611b436109c6565b97885273ffffffffffffffffffffffffffffffffffffffff166020880152604087015260f81b7fff000000000000000000000000000000000000000000000000000000000000001690611b9592611994565b90803b1561014f576113999360008094604051968795869485937f2b67b570000000000000000000000000000000000000000000000000000000008552600485016119d9565b611ae5919250611c019060603d8111611c0b575b611bf98183610985565b810190611965565b9150509190611adb565b503d611bef565b73ffffffffffffffffffffffffffffffffffffffff90818111611c33571690565b60046040517fc4bd89a9000000000000000000000000000000000000000000000000000000008152fdfea164736f6c6343000813000a";

type RelayOrderReactorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayOrderReactorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RelayOrderReactor__factory extends ContractFactory {
  constructor(...args: RelayOrderReactorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _permit2: PromiseOrValue<string>,
    _universalRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RelayOrderReactor> {
    return super.deploy(
      _permit2,
      _universalRouter,
      overrides || {}
    ) as Promise<RelayOrderReactor>;
  }
  override getDeployTransaction(
    _permit2: PromiseOrValue<string>,
    _universalRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _permit2,
      _universalRouter,
      overrides || {}
    );
  }
  override attach(address: string): RelayOrderReactor {
    return super.attach(address) as RelayOrderReactor;
  }
  override connect(signer: Signer): RelayOrderReactor__factory {
    return super.connect(signer) as RelayOrderReactor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayOrderReactorInterface {
    return new utils.Interface(_abi) as RelayOrderReactorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayOrderReactor {
    return new Contract(address, _abi, signerOrProvider) as RelayOrderReactor;
  }
}
