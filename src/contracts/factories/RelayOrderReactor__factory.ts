/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  RelayOrderReactor,
  RelayOrderReactorInterface,
} from "../RelayOrderReactor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IPermit2",
        name: "_permit2",
        type: "address",
      },
      {
        internalType: "address",
        name: "_universalRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DeadlineBeforeEndTime",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadlinePassed",
    type: "error",
  },
  {
    inputs: [],
    name: "EndTimeBeforeStartTime",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmounts",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidReactor",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsafeCast",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "filler",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "swapper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "Fill",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "order",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "sig",
            type: "bytes",
          },
        ],
        internalType: "struct SignedOrder",
        name: "signedOrder",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "feeRecipient",
        type: "address",
      },
    ],
    name: "execute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "permit2",
    outputs: [
      {
        internalType: "contract IPermit2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "universalRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c03461009257601f6118fc38819003918201601f19168301916001600160401b038311848410176100975780849260409485528339810103126100925780516001600160a01b03918282168203610092576020015191821682036100925760805260a05260405161184e90816100ae823960805181818161011b01526106ab015260a05181818160af01526107670152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b6000803560e01c90816312261ee7146100d657816335a9e4df1461006557508063ac9650d814610060578063d339056d1461005b5763e956bbdf1461005657600080fd5b610611565b6102e2565b61023c565b346100d357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d357602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b80fd5b346100d357807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100d35773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660805260206080f35b600091031261014f57565b600080fd5b60005b8381106101675750506000910152565b8181015183820152602001610157565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6020936101b381518092818752878088019101610154565b0116010190565b6020808201906020835283518092526040830192602060408460051b8301019501936000915b8483106101f05750505050505090565b909192939495848061022c837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc086600196030187528a51610177565b98019301930191949392906101e0565b3461014f5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f5767ffffffffffffffff60043581811161014f573660238201121561014f57806004013591821161014f573660248360051b8301011161014f576102c09160246102b49201610a28565b604051918291826101ba565b0390f35b73ffffffffffffffffffffffffffffffffffffffff81160361014f57565b3461014f576101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261014f5760043561031e816102c4565b60243561032a816102c4565b604435610336816102c4565b60a43560843560643560ff8316830361014f5760c4359360e435956040516020808201917f3644e5150000000000000000000000000000000000000000000000000000000083526004815261038a81610808565b60009283838d829373ffffffffffffffffffffffffffffffffffffffff82169573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc287036105f1575b505050506103e4575b505050156103d957005b6103e297611435565b005b919250907fdbb8cf42e1ecb028be3f3dbc922e1d878b963f411dc388ced501601c60f7c6f703610566576040517f7ecebe0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152908290829060249082905afa918215610561578661052260009485948591610534575b506040517f8fcbaf0c000000000000000000000000000000000000000000000000000000008582015273ffffffffffffffffffffffffffffffffffffffff80891660248301528916604482015260648101919091526084810192909252600160a483015260ff8a1660c483015260e482018b905261010482018c90528161012481015b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261085d565b905b81519101828c5af13880806103cf565b6105549150843d861161055a575b61054c818361085d565b810190610cb4565b38610473565b503d610542565b610cc3565b506040517fd505accf000000000000000000000000000000000000000000000000000000008183015273ffffffffffffffffffffffffffffffffffffffff808416602483015284166044820152606481018590526084810186905260ff871660a482015260c4810188905260e4810189905260009182916105eb8161010481016104f6565b90610524565b5192945090611388fa823d149351938415151616809390838d38806103c6565b3461014f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60408136011261014f576004359067ffffffffffffffff821161014f5760408260040191833603011261014f576106d1602435610673816102c4565b6106a861068b610683858061090e565b810190610bee565b9361069585610ccf565b60246106a086610eab565b96019061090e565b917f000000000000000000000000000000000000000000000000000000000000000086866111a6565b60608101518051908161075c575b505051906040610706602084015173ffffffffffffffffffffffffffffffffffffffff1690565b920151907f78ad7ec0e9f89e74012afa58738b6b661c024cb0fd185ee2f616c0a28924bd6673ffffffffffffffffffffffffffffffffffffffff604051941693806107573395829190602083019252565b0390a4005b6000916020839201827f00000000000000000000000000000000000000000000000000000000000000005af16107906109c7565b901561079c57806106df565b602081519101fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176107ef57604052565b6107a4565b67ffffffffffffffff81116107ef57604052565b6040810190811067ffffffffffffffff8211176107ef57604052565b6060810190811067ffffffffffffffff8211176107ef57604052565b610120810190811067ffffffffffffffff8211176107ef57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176107ef57604052565b604051906108ab82610824565b565b604051906108ab826107d3565b604051906108ab82610808565b67ffffffffffffffff81116107ef5760051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561014f570180359067ffffffffffffffff821161014f5760200191813603831361014f57565b9082101561097a576109769160051b81019061090e565b9091565b6108df565b908092918237016000815290565b67ffffffffffffffff81116107ef57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b3d156109f2573d906109d88261098d565b916109e6604051938461085d565b82523d6000602084013e565b606090565b80511561097a5760200190565b80516001101561097a5760400190565b805182101561097a5760209160051b010190565b919091610a34836108c7565b906040610a44604051938461085d565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610a71866108c7565b0160005b818110610ae1575050829460005b818110610a91575050505050565b600080610a9f83858861095f565b90610aae87518093819361097f565b0390305af4610abb6109c7565b901561079c5790600191610acf8288610a14565b52610ada8187610a14565b5001610a83565b806060602080938801015201610a75565b919082606091031261014f576040516060810181811067ffffffffffffffff8211176107ef5760405260408082948035610b2b816102c4565b845260208101356020850152013591610b43836102c4565b0152565b91908260a091031261014f5760405160a0810181811067ffffffffffffffff8211176107ef5760405260808082948035610b80816102c4565b84526020810135602085015260408101356040850152606081013560608501520135910152565b81601f8201121561014f57803590610bbe8261098d565b92610bcc604051948561085d565b8284526020838301011161014f57816000926020809301838601378301015290565b9060208282031261014f57813567ffffffffffffffff9283821161014f570190818103926101a0841261014f57608060405194610c2a866107d3565b1261014f57604051610c3b816107d3565b8335610c46816102c4565b81526020840135610c56816102c4565b602082015260408401356040820152606084013560608201528452610c7e8260808501610af2565b6020850152610c908260e08501610b47565b604085015261018083013590811161014f57610cac9201610ba7565b606082015290565b9081602091031261014f575190565b6040513d6000823e3d90fd5b60608151015160806040830151015111610d2d57515173ffffffffffffffffffffffffffffffffffffffff163003610d0357565b60046040517f4ddf4a64000000000000000000000000000000000000000000000000000000008152fd5b60046040517f773a6187000000000000000000000000000000000000000000000000000000008152fd5b6040517f52656c61794f726465722800000000000000000000000000000000000000000060208201527f616464726573732072656163746f722c00000000000000000000000000000000602b8201527f6164647265737320737761707065722c00000000000000000000000000000000603b8201527f6164647265737320696e707574526563697069656e742c000000000000000000604b8201527f75696e74323536206665655374617274416d6f756e742c00000000000000000060628201527f75696e7432353620666565537461727454696d652c000000000000000000000060798201527f75696e7432353620666565456e6454696d652c00000000000000000000000000608e8201527f627974657320756e6976657273616c526f7574657243616c6c6461746129000060a1820152609f815260c0810181811067ffffffffffffffff8211176107ef5760405290565b610eb3610d57565b80516020809201209180519073ffffffffffffffffffffffffffffffffffffffff808481855116940151169060408584015101511690604083015191858301519160606080818601519501519501518781519101209560405197880198895260408801526060870152608086015260a085015260c084015260e083015261010090818301528152610f4381610840565b51902090565b6110056110146033610f59610d57565b604051610f6581610824565b602e815260208101907f546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c7582527f696e7432353620616d6f756e742900000000000000000000000000000000000060408201526040519586937f52656c61794f72646572207769746e65737329000000000000000000000000006020860152610ff68151809260208989019101610154565b84019151809386840190610154565b0103601381018452018261085d565b90565b90815180825260208080930193019160005b828110611037575050505090565b909192938260408261106c60019489516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b01950193929101611029565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0938186528686013760008582860101520116010190565b9593909796949160c087526101208701988051606060c08a01528051809b5261014089019a60208092019160005b8281106111645750505050611125611014999a611156969594936040848c60e0602061114498015191015201516101008c01528a820360208c0152611017565b73ffffffffffffffffffffffffffffffffffffffff9094166040890152565b60608701528582036080870152610177565b9260a0818503910152611078565b9091929c8260408f9261119a81600195516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b019e01939291016110e5565b9190946040938451906111b882610824565b6002825260005b8681106113205750602073ffffffffffffffffffffffffffffffffffffffff6112706112ae938389015184611208825173ffffffffffffffffffffffffffffffffffffffff1690565b9101516112326112166108ba565b73ffffffffffffffffffffffffffffffffffffffff9093168352565b8582015261123f876109f7565b52611249866109f7565b506112568a8a0151611701565b61125f87610a04565b5261126986610a04565b5088611610565b95169580516060898201519101519061128761089e565b958652838601528885015251015173ffffffffffffffffffffffffffffffffffffffff1690565b946112b7610f49565b92853b1561014f5760009788946112fc93519a8b998a9889977ffe8ec1a7000000000000000000000000000000000000000000000000000000008952600489016110b7565b03925af180156105615761130d5750565b8061131a6108ab926107f4565b80610144565b60209061132b6115f7565b828286010152016111bf565b519065ffffffffffff8216820361014f57565b9081606091031261014f578051611360816102c4565b91611014604061137260208501611337565b9301611337565b92917fff00000000000000000000000000000000000000000000000000000000000000916040519460208601526040850152166060830152604182526108ab826107d3565b604061101494936101009373ffffffffffffffffffffffffffffffffffffffff8091168452815181815116602086015281602082015116848601526060848201519165ffffffffffff80931682880152015116608085015260208201511660a0840152015160c08201528160e08201520190610177565b6040517f927da10500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152918216602482018190529184166044820152909791966e22d473030f116ddee9f6b43ac78ba39690959294909391906060826064818b5afa918215610561576000926115bf575b506114c9906116b6565b6114d16108ad565b73ffffffffffffffffffffffffffffffffffffffff909a168a5273ffffffffffffffffffffffffffffffffffffffff1660208a015265ffffffffffff60408a015265ffffffffffff16606089015261152761089e565b97885273ffffffffffffffffffffffffffffffffffffffff166020880152604087015260f81b7fff00000000000000000000000000000000000000000000000000000000000000169061157992611379565b90803b1561014f576112fc9360008094604051968795869485937f2b67b570000000000000000000000000000000000000000000000000000000008552600485016113be565b6114c99192506115e69060603d6060116115f0575b6115de818361085d565b81019061134a565b91505091906114bf565b503d6115d4565b6040519061160482610808565b60006020838281520152565b91906040906040519161162283610824565b6002835260005b81811061169f5750509061168d61169c92604083966020810151602073ffffffffffffffffffffffffffffffffffffffff848301511691015161166d6112166108ba565b602082015261167b866109f7565b52611685856109f7565b50015161173e565b61169682610a04565b52610a04565b50565b6020906116aa6115f7565b82828701015201611629565b73ffffffffffffffffffffffffffffffffffffffff908181116116d7571690565b60046040517fc4bd89a9000000000000000000000000000000000000000000000000000000008152fd5b6117096115f7565b50604073ffffffffffffffffffffffffffffffffffffffff8251169101516040519161173483610808565b8252602082015290565b6117466115f7565b50602081015160408201519160806060820151910151908383116000146117915760046040517fd856fc5a000000000000000000000000000000000000000000000000000000008152fd5b808210156117c35760046040517f43133453000000000000000000000000000000000000000000000000000000008152fd5b4282116117e1575050505b6117d96112166108ba565b602082015290565b9192909190834283106117f757505050506117ce565b826118079403924203910361180d565b016117ce565b817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04811182021583021561014f5702049056fea164736f6c6343000818000a";

type RelayOrderReactorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RelayOrderReactorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RelayOrderReactor__factory extends ContractFactory {
  constructor(...args: RelayOrderReactorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _permit2: PromiseOrValue<string>,
    _universalRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RelayOrderReactor> {
    return super.deploy(
      _permit2,
      _universalRouter,
      overrides || {}
    ) as Promise<RelayOrderReactor>;
  }
  override getDeployTransaction(
    _permit2: PromiseOrValue<string>,
    _universalRouter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _permit2,
      _universalRouter,
      overrides || {}
    );
  }
  override attach(address: string): RelayOrderReactor {
    return super.attach(address) as RelayOrderReactor;
  }
  override connect(signer: Signer): RelayOrderReactor__factory {
    return super.connect(signer) as RelayOrderReactor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RelayOrderReactorInterface {
    return new utils.Interface(_abi) as RelayOrderReactorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RelayOrderReactor {
    return new Contract(address, _abi, signerOrProvider) as RelayOrderReactor;
  }
}
