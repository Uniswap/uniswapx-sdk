/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  MockUniversalRouter,
  MockUniversalRouterInterface,
} from "../MockUniversalRouter";

const _abi = [
  {
    type: "fallback",
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "success",
    inputs: [],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "error",
    name: "UniversalRouterError",
    inputs: [],
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060928061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80630b93381b14605a575b6040517fca46dbc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b00fea2646970667358221220db8893290454b9de2760f371219648582b1c610d1a37808f6a496d97d841d66464736f6c63430008180033";

type MockUniversalRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUniversalRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUniversalRouter__factory extends ContractFactory {
  constructor(...args: MockUniversalRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockUniversalRouter> {
    return super.deploy(overrides || {}) as Promise<MockUniversalRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockUniversalRouter {
    return super.attach(address) as MockUniversalRouter;
  }
  override connect(signer: Signer): MockUniversalRouter__factory {
    return super.connect(signer) as MockUniversalRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUniversalRouterInterface {
    return new utils.Interface(_abi) as MockUniversalRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniversalRouter {
    return new Contract(address, _abi, signerOrProvider) as MockUniversalRouter;
  }
}
